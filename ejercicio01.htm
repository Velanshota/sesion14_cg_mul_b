<!DOCTYPE html >
    <html>
    <head>
    <meta charset = "utf-8"/>
    <style>
    body 
	{
        background - color: #ffffff;
        margin: 0;
        overflow: hidden;
    } </style> </head>
    <body>
<!--- https://ajax.googleapis.com/ajax/libs/threejs/r76/three.min.js -->
<script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/95/three.min.js"> </script>
<script>
//Creacion de variables de la escena
var camera, scene, renderer;
var geometria, material, mesh;
var clock;
//Funcion Cubo, donde se crea cada objeto
function cubo(x, y, z, px, py, pz, material, color, wf) 
{
	geometria = new THREE.CubeGeometry(x, y, z);
    switch(material) 
	{
		//Casos para elegir el Material del cubo
    	case 'Basic': material = new THREE.MeshBasicMaterial({color: color, wireframe: wf}); break;
    	case 'Standard': material = new THREE.MeshStandardMaterial({color: color, wireframe: wf}); break;
    	case 'Physical': material = new THREE.MesPhysicalMaterial({color: color, wireframe: wf}); break;
    	case 'Phong': material = new THREE.MeshPhongMaterial({color: color, wireframe: wf}); break;
    	case 'Lambert': material = new THREE.MeshLambertMaterial({color: color, wireframe: wf}); break;
    }
	//Creacion del cubo
    cube = new THREE.Mesh(geometria, material);
	//AÃ±ade el cubo a la escena y le da la posicion en el origen
    scene.add(cube);
    cube.position.set(px, py, pz);

    return cube;
}
//Funcion principal
function init() 
{
	//Paso 1: Creacion y renderizado de la escena
    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth*0.99, window.innerHeight*0.99);
    document.body.appendChild(renderer.domElement);
    scene = new THREE.Scene();
	//Paso 2: Arreglo de cubos y la cantidad de cubos a crear
    var arrCube = [];
	var numCubos= 3;

    var t = 2;   // Valor de lado del cubo mayor
    var angulo = Math.PI/4;

    for (var i = 0; i < numCubos; i++) {
		arrCube.push(cubo(t, t, t, 0, 0, 0, 'Phong', (i==0 ? 'red': i==1 ? 'green' : 'yellow'), false))
		arrCube[0].position.set(t/2, t/2, t/2)
		if (i == 1) {
			arrCube[i].position.set(t/2, t + t/4, t/2)
			arrCube[i].rotateY(angulo);
		    arrCube[i].scale.set(0.5, 0.5, 0.5);
		}
		if (i == 2) {
			arrCube[i].position.set(t/2, t + t/2 + t/8, t/2)
		    arrCube[i].scale.set(0.25, 0.25, 0.25);
		}
    }

    const axesHelper = new THREE.AxesHelper(10);
    scene.add(axesHelper);

    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);
    camera.position.set(t/2, 6*t, t/2);
    camera.lookAt(scene.position);

	var light = new THREE.PointLight(0xFFFFFF);
	light.position.set(-5, 7, 20);
	scene.add(light);

    renderer.render(scene, camera);
}

init();

</script>
</body>
</html>